type User @entity(immutable: true) {
  id: Bytes! # address
  projectsAsClient: [Project!]! @derivedFrom(field: "client")
  projectsAsFreelancer: [Project!]! @derivedFrom(field: "freelancer")
  reputations: [Reputation!]! @derivedFrom(field: "freelancer")
}

type Project @entity(immutable: true) {
  id: Bytes! # projectAddress
  client: User!
  freelancer: User!
  createdAt: BigInt!
  events: [ProjectCreated!]! @derivedFrom(field: "project")
}

type Reputation @entity(immutable: true) {
  id: Bytes! # use tokenId as Bytes!
  freelancer: User!
  project: Project!
  tokenURI: String!
  mintedAt: BigInt!
  events: [ReputationMinted!]! @derivedFrom(field: "reputation")
}

# Event Entities (kept for historical data)

type ProjectCreated @entity(immutable: true) {
  id: Bytes!
  project: Project!
  client: Bytes! # address
  freelancer: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ReputationMinted @entity(immutable: true) {
  id: Bytes!
  reputation: Reputation!
  freelancer: Bytes! # address
  projectContract: Bytes! # address
  tokenId: Bytes! # use Bytes! for linking
  tokenURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollabraChainReputationRoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollabraChainReputationRoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollabraChainReputationRoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
